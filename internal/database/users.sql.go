// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const insetUser = `-- name: InsetUser :one
INSERT INTO
    users (
        id,
        created_at,
        updated_at,
        email,
        hashed_password
    )
VALUES (
        gen_random_uuid (),
        now(),
        now(),
        $1,
        $2
    )
RETURNING
        id,
        created_at,
        updated_at,
        email
`

type InsetUserParams struct {
	Email          string
	HashedPassword sql.NullString
}

type InsetUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Email     string
}

func (q *Queries) InsetUser(ctx context.Context, arg InsetUserParams) (InsetUserRow, error) {
	row := q.db.QueryRowContext(ctx, insetUser, arg.Email, arg.HashedPassword)
	var i InsetUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
DELETE FROM users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}
